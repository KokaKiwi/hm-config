From ae5f71431596d6c4e7340606db1395e6362108e7 Mon Sep 17 00:00:00 2001
From: KokaKiwi <kokakiwi+git@kokakiwi.net>
Date: Mon, 7 Oct 2024 11:18:38 +0200
Subject: [PATCH 3/5] PR#5905: Nushell generator
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Squashed commit of the following:

commit 495ef97366fc85adfefe2b8baa0f867b100b0fa2
Author: Joaquín Triñanes <hi@joaquint.io>
Date:   Sat Sep 14 18:09:15 2024 +0200

    nushell: Allow arbitrary env vars

commit 7cb92662356edd8970f88ac9d811e8ce3c44e330
Author: Joaquín Triñanes <hi@joaquint.io>
Date:   Sat Sep 14 02:15:02 2024 +0200

    nushell: create generator helpers

commit 8034b39f657dcdeb95e172c9dbeccc62ee5e9471
Author: Joaquín Triñanes <hi@joaquint.io>
Date:   Sat Sep 14 14:48:32 2024 +0200

    nushell: add joaquintrinanes as maintainer
---
 modules/lib/default.nix                       |  1 +
 modules/lib/nushell.nix                       | 65 +++++++++++++++++++
 modules/lib/types.nix                         | 23 +++++++
 modules/programs/nushell.nix                  | 29 +++++++--
 .../modules/programs/nushell/env-expected.nu  | 15 ++++-
 .../programs/nushell/example-settings.nix     | 14 +++-
 6 files changed, 137 insertions(+), 10 deletions(-)
 create mode 100644 modules/lib/nushell.nix

diff --git a/modules/lib/default.nix b/modules/lib/default.nix
index 5d732a83..8014c625 100644
--- a/modules/lib/default.nix
+++ b/modules/lib/default.nix
@@ -14,4 +14,5 @@ rec {
 
   shell = import ./shell.nix { inherit lib; };
   zsh = import ./zsh.nix { inherit lib; };
+  nushell = import ./nushell.nix { inherit lib; };
 }
diff --git a/modules/lib/nushell.nix b/modules/lib/nushell.nix
new file mode 100644
index 00000000..e831380c
--- /dev/null
+++ b/modules/lib/nushell.nix
@@ -0,0 +1,65 @@
+{ lib }: rec {
+  mkNushellInline = expr: lib.setType "nushell-inline" { inherit expr; };
+
+  toNushell = { indent ? "", multiline ? true, asBindings ? false }@args:
+    v:
+    let
+      innerIndent = "${indent}    ";
+      introSpace = if multiline then ''
+
+        ${innerIndent}'' else
+        " ";
+      outroSpace = if multiline then ''
+
+        ${indent}'' else
+        " ";
+      innerArgs = args // {
+        indent = if asBindings then indent else innerIndent;
+        asBindings = false;
+      };
+      concatItems = lib.concatStringsSep introSpace;
+      isNushellInline = lib.isType "nushell-inline";
+
+      generatedBindings = assert lib.assertMsg (badVarNames == [ ])
+        "Bad Nushell variable names: ${
+          lib.generators.toPretty { } badVarNames
+        }";
+        lib.concatStrings (lib.mapAttrsToList (key: value: ''
+          ${indent}let ${key} = ${toNushell innerArgs value}
+        '') v);
+
+      isBadVarName = name:
+        # Extracted from https://github.com/nushell/nushell/blob/ebc7b80c23f777f70c5053cca428226b3fe00d30/crates/nu-parser/src/parser.rs#L33
+        # Variables with numeric or even empty names are allowed. The only requisite is not containing any of the following characters
+        let invalidVariableCharacters = ".[({+-*^/=!<>&|";
+        in lib.match "^[$]?[^${lib.escapeRegex invalidVariableCharacters}]+$"
+        name == null;
+      badVarNames = lib.filter isBadVarName (builtins.attrNames v);
+    in if asBindings then
+      generatedBindings
+    else if v == null then
+      "null"
+    else if lib.isInt v || lib.isFloat v || lib.isString v || lib.isBool v then
+      lib.strings.toJSON v
+    else if lib.isList v then
+      (if v == [ ] then
+        "[]"
+      else
+        "[${introSpace}${
+          concatItems (map (value: "${toNushell innerArgs value}") v)
+        }${outroSpace}]")
+    else if lib.isAttrs v then
+      (if isNushellInline v then
+        "(${v.expr})"
+      else if v == { } then
+        "{}"
+      else if lib.isDerivation v then
+        toString v
+      else
+        "{${introSpace}${
+          concatItems (lib.mapAttrsToList (key: value:
+            "${lib.strings.toJSON key}: ${toNushell innerArgs value}") v)
+        }${outroSpace}}")
+    else
+      abort "nushell.toNushell: type ${lib.typeOf v} is unsupported";
+}
diff --git a/modules/lib/types.nix b/modules/lib/types.nix
index 056d3165..14d1c219 100644
--- a/modules/lib/types.nix
+++ b/modules/lib/types.nix
@@ -107,4 +107,27 @@ in rec {
         mergeDefaultOption loc defs;
   };
 
+  nushellValue = let
+    valueType = types.nullOr (types.oneOf [
+      (lib.mkOptionType {
+        name = "nushell";
+        description = "Nushell inline value";
+        descriptionClass = "name";
+        check = lib.isType "nushell-inline";
+      })
+      types.bool
+      types.int
+      types.float
+      types.str
+      types.path
+      (types.attrsOf valueType // {
+        description = "attribute set of Nushell values";
+        descriptionClass = "name";
+      })
+      (types.listOf valueType // {
+        description = "list of Nushell values";
+        descriptionClass = "name";
+      })
+    ]);
+  in valueType;
 }
diff --git a/modules/programs/nushell.nix b/modules/programs/nushell.nix
index 2ebd9554..6586d1e1 100644
--- a/modules/programs/nushell.nix
+++ b/modules/programs/nushell.nix
@@ -39,7 +39,7 @@ let
       };
     });
 in {
-  meta.maintainers = [ maintainers.Philipp-M ];
+  meta.maintainers = [ maintainers.Philipp-M maintainers.joaquintrinanes ];
 
   imports = [
     (mkRemovedOptionModule [ "programs" "nushell" "settings" ] ''
@@ -145,11 +145,24 @@ in {
     };
 
     environmentVariables = mkOption {
-      type = types.attrsOf types.str;
+      type = types.attrsOf hm.types.nushellValue;
       default = { };
-      example = { FOO = "BAR"; };
+      example = literalExpression ''
+        {
+          FOO = "BAR";
+          LIST_VALUE = [ "foo" "bar" ];
+          NU_LIB_DIRS = lib.concatStringsSep ":" [ ./scripts ];
+          PROMPT_COMMAND = lib.hm.nushell.mkNushellInline '''{|| "> "}''';
+          ENV_CONVERSIONS.PATH = {
+            from_string = lib.hm.nushell.mkNushellInline "{|s| $s | split row (char esep) }";
+            to_string = lib.hm.nushell.mkNushellInline "{|v| $v | str join (char esep) }";
+          };
+        }
+      '';
       description = ''
-        An attribute set that maps an environment variable to a shell interpreted string.
+        Environment variables to be set.
+
+        Inline values can be set with `lib.hm.nushell.mkNushellInline`.
       '';
     };
   };
@@ -173,9 +186,11 @@ in {
       })
 
       (let
-        envVarsStr = concatStringsSep "\n"
-          (mapAttrsToList (k: v: "$env.${k} = ${v}") cfg.environmentVariables);
-      in mkIf (cfg.envFile != null || cfg.extraEnv != "" || envVarsStr != "") {
+        hasEnvVars = cfg.environmentVariables != { };
+        envVarsStr = ''
+          load-env ${hm.nushell.toNushell { } cfg.environmentVariables}
+        '';
+      in mkIf (cfg.envFile != null || cfg.extraEnv != "" || hasEnvVars) {
         "${configDir}/env.nu".text = mkMerge [
           (mkIf (cfg.envFile != null) cfg.envFile.text)
           cfg.extraEnv
diff --git a/tests/modules/programs/nushell/env-expected.nu b/tests/modules/programs/nushell/env-expected.nu
index 07105fc5..50f6f767 100644
--- a/tests/modules/programs/nushell/env-expected.nu
+++ b/tests/modules/programs/nushell/env-expected.nu
@@ -1,4 +1,17 @@
 $env.FOO = 'BAR'
 
 
-$env.BAR = $'(echo BAZ)'
\ No newline at end of file
+load-env {
+    "ENV_CONVERSIONS": {
+        "PATH": {
+            "from_string": ({|s| $s | split row (char esep) })
+            "to_string": ({|v| $v | str join (char esep) })
+        }
+    }
+    "FOO": "BAR"
+    "LIST_VALUE": [
+        "foo"
+        "bar"
+    ]
+    "PROMPT_COMMAND": ({|| "> "})
+}
diff --git a/tests/modules/programs/nushell/example-settings.nix b/tests/modules/programs/nushell/example-settings.nix
index d870eb9d..4fc1402a 100644
--- a/tests/modules/programs/nushell/example-settings.nix
+++ b/tests/modules/programs/nushell/example-settings.nix
@@ -1,4 +1,4 @@
-{ pkgs, config, ... }:
+{ pkgs, config, lib, ... }:
 
 {
   programs.nushell = {
@@ -28,7 +28,17 @@
       "ll" = "ls -a";
     };
 
-    environmentVariables = { BAR = "$'(echo BAZ)'"; };
+    environmentVariables = {
+      FOO = "BAR";
+      LIST_VALUE = [ "foo" "bar" ];
+      PROMPT_COMMAND = lib.hm.nushell.mkNushellInline ''{|| "> "}'';
+      ENV_CONVERSIONS.PATH = {
+        from_string =
+          lib.hm.nushell.mkNushellInline "{|s| $s | split row (char esep) }";
+        to_string =
+          lib.hm.nushell.mkNushellInline "{|v| $v | str join (char esep) }";
+      };
+    };
   };
 
   test.stubs.nushell = { };
-- 
2.47.0

